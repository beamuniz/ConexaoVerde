@model FornecedorPerfilModel

@{
    ViewData["Title"] = "Perfil do Fornecedor";
    var endereco = Model.Fornecedor.Endereco;
    var enderecoCompleto = $"{endereco.Rua}, {endereco.Numero}, {endereco.Cidade} - {endereco.Estado}, {endereco.CEP}";
}

<head>
    <!-- Adicionar o link do FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <style>
        /* Estilo para a área de mensagens com rolagem */
        #chatMessages {
            max-height: 300px;
            /* Tamanho máximo do chat */
            overflow-y: auto;
            /* Ativa a rolagem vertical */
        }
    </style>
</head>

<section class="bg-white dark:bg-gray-900 py-16">
    <div class="container mx-auto px-6">
        <!-- Seta de Voltar -->
        <div class="mb-8">
            <a href="/Fornecedor/ListarFornecedor"
                class="inline-flex items-center px-4 py-2 bg-blue-500 text-white font-semibold text-lg rounded-lg hover:bg-blue-600">
                <i class="fas fa-arrow-left mr-3"></i>
                Voltar
            </a>
        </div>

        <!-- Título -->
        <h1 class="text-4xl font-semibold text-gray-800 dark:text-white text-center mb-12">
            Perfil do Fornecedor - <span class="text-blue-500">@Model.Fornecedor.NomeFantasia</span>
        </h1>

        <div class="flex flex-wrap justify-center gap-12">
            <!-- Imagem do Fornecedor -->
            <div class="w-full md:w-2/3 lg:w-1/3 xl:w-1/4 mb-8">
                <img src="@(Model.Usuario.FotoPerfil != null ? $"data:image/png;base64,{Convert.ToBase64String(Model.Usuario.FotoPerfil)}" : "https://via.placeholder.com/400x400")"
                    alt="Imagem Fornecedor" class="w-56 h-56 rounded-full shadow-xl border-4 border-blue-500">
            </div>

            <!-- Informações do Fornecedor -->
            <div class="w-full md:w-2/3 lg:w-2/3 xl:w-2/3">
                <div class="mb-6">
                    <h2 class="text-3xl font-semibold text-gray-800 dark:text-white">@Model.Fornecedor.RazaoSocial</h2>
                    <div class="mt-4 bg-gray-100 dark:bg-gray-800 p-6 rounded-lg shadow-lg">
                        <p class="text-lg text-gray-600 dark:text-gray-300 mt-2">
                            CNPJ:
                            <span class="font-semibold">@Model.Fornecedor.Cnpj</span>
                        </p>
                        <p class="text-lg text-gray-600 dark:text-gray-300 mt-4">
                            <strong>Sobre:</strong> @*@Model.Fornecedor.Descricao*@
                        </p>
                    </div>
                </div>

                <!-- Informações de Contato -->
                <div class="mt-8">
                    <h3 class="text-2xl font-semibold text-gray-800 dark:text-white">Entre em Contato</h3>
                    <div class="mt-4">
                        <p class="text-lg text-gray-600 dark:text-gray-300">
                            <strong>Telefone:</strong> @Model.Usuario.Telefone
                        </p>
                        <p class="text-lg text-gray-600 dark:text-gray-300">
                            <strong>E-mail:</strong> @Model.Usuario.Email
                        </p>
                        <p class="text-lg text-gray-600 dark:text-gray-300">
                            <strong>Endereço:</strong> @enderecoCompleto
                        </p>
                    </div>
                </div>

                <!-- Mapa do Endereço -->
                <div class="mt-16">
                    <div class="w-full" style="height: 500px;">
                        <iframe src="https://www.google.com/maps?q=@enderecoCompleto&output=embed" width="100%"
                            height="100%" style="border:0;">
                        </iframe>
                    </div>
                </div>
            </div>
        </div>

        <!-- Galeria de Produtos -->
        <div class="mt-16">
            <h2 class="text-3xl font-semibold text-gray-800 dark:text-white text-center mb-8">
                Produtos de @Model.Fornecedor.NomeFantasia
            </h2>

            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
                @foreach (var produto in Model.Produtos)
                {
                    <div
                        class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg overflow-hidden">
                        <img src="data:image/jpeg;base64,@produto.ImgProdutoBase64" alt="@produto.NomeProduto"
                            class="w-full h-48 object-cover">
                        <div class="p-6">
                            <h3 class="text-xl font-semibold text-gray-800 dark:text-white">@produto.NomeProduto</h3>
                            <p class="text-sm text-gray-600 dark:text-gray-300 mt-2">R$ @produto.Preco.ToString("F2")</p>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Botão de Chat -->
        <button id="chatToggleButton" class="p-6 bg-blue-500 text-white rounded-full fixed bottom-6 right-6 shadow-lg">
            <i class="fas fa-comment-alt fa-3x"></i>
        </button>

        <!-- Caixa de Chat -->
        <div id="chatContainer"
            class="hidden fixed bottom-24 right-6 bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg w-80 max-w-xs">
            <div id="chatHeader" class="flex items-center mb-4">
                <img src="@(Model.Usuario.FotoPerfil != null ? $"data:image/png;base64,{Convert.ToBase64String(Model.Usuario.FotoPerfil)}" : "https://via.placeholder.com/400x400")"
                    alt="Foto Fornecedor" class="w-12 h-12 rounded-full border-2 border-blue-500">
                <span
                    class="ml-4 text-lg font-semibold text-gray-800 dark:text-black">@Model.Fornecedor.RazaoSocial</span>
            </div>

            <!-- Área de mensagens -->
            <div id="chatMessages" class="flex-1 overflow-y-auto mb-4">
                <!-- Mensagens aparecerão aqui -->
            </div>

            <!-- Caixa de input de mensagens -->
            <div class="flex items-center space-x-2">
                <input id="userMessage" type="text" placeholder="Escreva uma mensagem"
                    class="w-full px-4 py-2 text-lg border rounded-lg">
                <button id="sendButton"
                    class="w-12 h-12 bg-blue-500 text-white rounded-full flex items-center justify-center">
                    <i class="fas fa-paper-plane"></i>
                </button>
            </div>
        </div>
    </div>
</section>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const chatToggleButton = document.getElementById('chatToggleButton');
        const chatContainer = document.getElementById('chatContainer');
        const chatMessages = document.getElementById('chatMessages');
        const userMessageInput = document.getElementById('userMessage');
        const sendButton = document.getElementById('sendButton');

        // Mensagem automática inicial
        const initialMessage = "Olá! Esta é uma mensagem automática. Como posso ajudar?";
        const botMessageElement = document.createElement('div');
        botMessageElement.classList.add('flex', 'justify-start', 'mb-4');
        botMessageElement.innerHTML = `
        <div class="bg-gray-300 text-black px-4 py-2 rounded-lg max-w-xs">
            ${initialMessage}
        </div>
    `;
        chatMessages.appendChild(botMessageElement);

        // Certifique-se de que o chat comece escondido
        chatContainer.classList.add('hidden');

        // Alterna a visibilidade do chat e ajusta o botão
        chatToggleButton.addEventListener('click', function () {
            // Alterna a classe 'hidden' para mostrar ou esconder o chat
            chatContainer.classList.toggle('hidden');

            // Alterando o conteúdo do botão conforme a visibilidade do chat
            if (chatContainer.classList.contains('hidden')) {
                chatToggleButton.innerHTML = `<i class="fas fa-comment-alt"></i>`;
            } else {
                chatToggleButton.innerHTML = `<i class="fas fa-times"></i>`;

                // Quando o chat for aberto, focar no campo de mensagem
                userMessageInput.focus();
            }
        });

        // Função para rolar para a última mensagem
        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Função para enviar a mensagem
        function sendMessage() {
            var userMessage = userMessageInput.value;

            if (userMessage.trim() !== "") {
                var userMessageElement = document.createElement('div');
                userMessageElement.classList.add('flex', 'justify-end', 'mb-4');
                userMessageElement.innerHTML = `
                <div class="bg-blue-500 text-white px-4 py-2 rounded-lg max-w-xs">
                    ${userMessage}
                </div>
            `;
                chatMessages.appendChild(userMessageElement);
                userMessageInput.value = ""; // Limpar o campo de entrada

                // Enviar a mensagem para o backend
                var fornecedorId = @Model.Fornecedor.Id;
                fetch('/Fornecedor/EnviarMensagem', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        fornecedorId: fornecedorId,
                        mensagem: userMessage
                    })
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        var botResponseElement = document.createElement('div');
                        botResponseElement.classList.add('flex', 'justify-start', 'mb-4');
                        botResponseElement.innerHTML = `
                        <div class="bg-gray-300 text-black px-4 py-2 rounded-lg max-w-xs">
                            ${data.responseMessage}
                        </div>
                    `;
                        chatMessages.appendChild(botResponseElement);
                    }
                });

                // Rolar para a última mensagem
                scrollToBottom();
            }
        }

        // Evento para enviar mensagem ao pressionar Enter
        userMessageInput.addEventListener('keydown', function (event) {
            if (event.key === 'Enter') {
                event.preventDefault(); // Evita que o formulário seja enviado ao pressionar Enter
                sendMessage();
            }
        });

        // Evento de clique no botão de envio
        sendButton.addEventListener('click', function () {
            sendMessage();
        });

        // Rolar para a última mensagem quando o chat é aberto pela primeira vez
        scrollToBottom();
    });
</script>
